{"version":3,"mappings":"mJAaA,IAAIA,EAEJ,MAAMC,EAAiB,SAAW,CAChC,KAAM,CAAC,OAAM,QAAO,UAAUD,EAC1B,MACA,IACQE,WAAS,WAAW,YAAYC,CAAI,EAC9C,MAAMC,EAAgB,MAAMF,EAAU,SAAS,WAAW,UAAU,mCAAoC,CACtG,OAAQG,EAAI,GACZ,SAAUA,EAAI,KACd,eAAgBC,CACf,GAAC,OAAM,aAAc,EAAK,GAE1BF,EAAc,IAAM,uBACrBF,EAAU,SAAS,WAAW,QAAQE,EAAc,IAAI,EACxDG,QAAiB,OAAO,sBAAU,qHAG9BC,GACN,OAAQA,EAAiB,KAAM,CAC7B,IAAK,0BAA2B,CAC7BA,EAAiB,QAAU,GAC5BD,QAAiB,OAAO,4BAAgB,2PACxC,KACF,CAEA,QAAS,CACC,cAAM,8BAA+BC,CAAG,EAC1C,QAAeC,EAAW,UAAU,EACvCC,IAAiB,kBAAmBH,EAAiBI,aAAO,0BAAc,yTACrED,IAAiB,oBAAmBH,EAAiBI,aAAO,0BAAc,iNAClF,KACF,CACF,CACF,CAEA,SAAS,KAAOC,GAAQ,OAAS,YAAc,mBAAmBA,CAAM,EAAI,GACzEL,GACDA,EAAe,KAAMM,GAAMA,EAAE,QAAQ,OAAO,CAEhD,EAEMC,EAAO,IAAIC,EAAK,kBAAmB,GAAM,IAAM,CACtCC,IAAK,OAAO,kBAAmB,EAAI,EACjCf,GACjB,EAAIgB,GAAuB,CAClBjB,IACGE,WAAS,gBAAgB,YAAY,YAAa,CAAC,EAAG,sBAAuB,OAAK,CAC9F,CAAC","names":["data","importWebToken","rootScope","dcId","authorization","App","token","mountPageAfter","err","STATE_INIT","defaultState","__vitePreload","tgAddr","m","page","Page","putPreloader","_data"],"sources":["../src/pages/pageSignImport.ts"],"sourcesContent":["/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport {putPreloader} from '../components/putPreloader';\nimport App from '../config/app';\nimport {STATE_INIT} from '../config/state';\nimport rootScope from '../lib/rootScope';\nimport {AuthState} from '../types';\nimport Page from './page';\n\nlet data: AuthState.signImport['data'];\n\nconst importWebToken = async() => {\n  const {dcId, token, tgAddr} = data;\n  let mountPageAfter: Promise<{default: Page}>;\n  try {\n    rootScope.managers.apiManager.setBaseDcId(dcId);\n    const authorization = await rootScope.managers.apiManager.invokeApi('auth.importWebTokenAuthorization', {\n      api_id: App.id,\n      api_hash: App.hash,\n      web_auth_token: token\n    }, {dcId, ignoreErrors: true});\n\n    if(authorization._ === 'auth.authorization') {\n      rootScope.managers.apiManager.setUser(authorization.user);\n      mountPageAfter = import('./pageIm');\n      // return;\n    }\n  } catch(err) {\n    switch((err as ApiError).type) {\n      case 'SESSION_PASSWORD_NEEDED': {\n        (err as ApiError).handled = true;\n        mountPageAfter = import('./pagePassword');\n        break;\n      }\n\n      default: {\n        console.error('authorization import error:', err);\n        const defaultState = STATE_INIT.authState._;\n        if(defaultState === 'authStateSignIn') mountPageAfter = import('./pageSignIn');\n        else if(defaultState === 'authStateSignQr') mountPageAfter = import('./pageSignQR');\n        break;\n      }\n    }\n  }\n\n  location.hash = tgAddr?.trim() ? '#?tgaddr=' + encodeURIComponent(tgAddr) : '';\n  if(mountPageAfter) {\n    mountPageAfter.then((m) => m.default.mount());\n  }\n};\n\nconst page = new Page('page-signImport', true, () => {\n  putPreloader(page.pageEl.firstElementChild, true);\n  importWebToken();\n}, (_data: typeof data) => {\n  data = _data;\n  rootScope.managers.appStateManager.pushToState('authState', {_: 'authStateSignImport', data});\n});\n\nexport default page;\n"],"file":"pageSignImport-086a5aee.js"}